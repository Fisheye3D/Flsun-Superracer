##########################################################[EMULATORS / FILAMENT COMPATABILITY]##################################################################################################


[gcode_macro Super_racer] 
description: lower acceration / velocity max to print cartesian optimised filaent. eg low melt pla /silk 'like blends' prone to bad overhangs / tearing infill with delta jerk /acc values. 
gcode: 
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=31.0
  SET_VELOCITY_LIMIT ACCEL=3700
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=3200
  SET_VELOCITY_LIMIT VELOCITY=300

[gcode_macro Super_racer_performance]
description: lower acceration / velocity max to print cartesian optimised filaent. eg low melt pla /silk 'like blends' prone to bad overhangs / tearing infill with delta jerk /acc values. 
gcode: 
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=45.0
  SET_VELOCITY_LIMIT ACCEL=6000
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=4000
  SET_VELOCITY_LIMIT VELOCITY=400

############################################################################################################################################################
#MACROS 
############################################################################################################################################################
[save_variables]
filename: ~/variables.cfg

[gcode_macro START_PRINT_PETG]
description: Start G-Code
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  G21
  G90
  M82
  M104 S150
  M140 S{BED_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  BED_MESH_PROFILE LOAD=petg
  SET_GCODE_OFFSET Z=0.035
  G1 Z270 F2500
  G1 X-130 F2500
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  G1 Z1 F2500
  G1 X-130 Y0 Z0.4
  G92 E0
  G3 X0 Y-130 Z0.4 I130 E40 F1500  J-0.5
  G92 E0
  G1 E-1.5 F1800


[gcode_macro START_PRINT]
description: Start G-Code
gcode:
 {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  G21
  G90
  M82
  M104 S100
  M140 S{BED_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  BED_MESH_PROFILE LOAD=default
  G1 Z270 F2500
  G1 X-130 F2500
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  G1 Z1 F2500
  G1 X-130 Y0 Z0.4
  G92 E0
  G3 X0 Y-130 Z0.4 I130 E40 F1500  J-0.5
  G92 E0
  G1 E-1.5 F1800
  
[gcode_macro START_PRINTTPU]
description: Start G-Code
gcode:
 {% set BED_TEMP = params.BED_TEMP|default(55)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
  G21
  G90
  M82
  M104 S100
  M140 S{BED_TEMP}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  BED_MESH_PROFILE LOAD=default
  SET_GCODE_OFFSET Z=0.035
  G1 Z270 F2500
  G1 X-130 F2500
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  G1 Z1 F2500
  G1 X-130 Y0 Z0.4
  G92 E0
  G3 X0 Y-130 Z0.4 I130 E40 F1500  J-0.5
  G92 E0
  G1 E-2 F1800

[gcode_macro END_PRINT]
description: End G-Code
gcode:
  M106 S0
  M104 S0
  M140 S0
  G92 E0
  G91
  G1 E-1 F300
  G1 Z+5 F6000
  G28
  G90


#[delayed_gcode LOAD_GCODE_OFFSETS]
#initial_duration: 6
#gcode:  
  #{% if printer.save_variables.variables.z_offset %}
  #{% set zoffset = printer.save_variables.variables.z_offset %}
 # SET_GCODE_OFFSET {% for axis, offset in zoffset.items() if zoffset[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
 # { action_respond_info("Loaded Z offset from saved variables [%s]" % (zoffset)) }
 # {% endif %}

 
[gcode_macro SET_GCODE_OFFSET]  
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.z_offset %}
        {% set zoffset = printer.save_variables.variables.z_offset %}
    {% else %} 
        {% set zoffset = {'z': None} %}
    {% endif %}
    {% set ns = namespace(zoffset={'z': zoffset.z}) %}
     _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
    {%if 'Z' in params %}{% set null = ns.zoffset.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.zoffset.z == None %}{% set null = ns.zoffset.update({'z': 0}) %}{% endif %}
        {% set null = ns.zoffset.update({'z': (ns.zoffset.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=z_offset VALUE="{ns.zoffset}"
############################################################################################################################################################
#IF ENABLED KEEP WALL ACCELERATION THE SAME WITH PRESSURE ADVANCE THIS ALSO APPLIES TO M205. DO NOT FORGET KLIPPER DOES NOT USE JERK THE VALUES ARE NOT THE SAME AND SCALE WITH ACC. 
#THIS IS BOTH FOR COMPATABILITY WITH CERTAIN SLICERS AND FOR DYNAMIC ACC 
[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% set f = params.F|default(0.85)|float %} # DEFAULT 0.85 = 85 PERCENT OF SET ACCELERATION VIA SLICER FOR ACCEL TO DECEL 
  {% if 'S' in params %}
  {% set s = params.S|float %}
  SET_VELOCITY_LIMIT ACCEL={s} #ACCEL_TO_DECEL={ s * f }
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p} #ACCEL_TO_DECEL={ p * f }
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t} #ACCEL_TO_DECEL={ t * f }
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p} #ACCEL_TO_DECEL={ p * f }
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t} #ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}

############################################################################################################################################################
[gcode_macro M205]
gcode:
  {% if 'X' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

############################################################################################################################################################
[gcode_macro PAUSE]
description: Pause the current print
rename_existing: PAUSE_BASE
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-122) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  RESPOND MSG="Pausing..."
  PAUSE_BASE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x} Y{y} F2500

##########################################################################################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the current print
rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND MSG="Printing canceled!"
  G28
  M106 S0
  M104 S0
  M140 S0
  CANCEL_PRINT_BASE
############################################################################################################################################################
[gcode_macro UNLOAD_FILAMENT]
description: Filament unloading
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SAVE_GCODE_STATE NAME=unload_state
  {% if printer.extruder.temperature < 200 %}
  RESPOND MSG="Heating..."
  M109 S{params.TEMP|default(220, true)}  #Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% endif %}
  RESPOND MSG="Unloading filament..."
  G91
  G0 E30 F400                             # Purge
  G0 E-30 F1500                           # Quick Retract
  G0 E-5 F500
  G0 E-70 F500
  RESTORE_GCODE_STATE NAME=unload_state
  {% endif %}
############################################################################################################################################################
[gcode_macro RESUME]
description: Resume the current print
rename_existing: RESUME_BASE
gcode:
  ##### set defaults #####
  {% set e = params.E|default(1) %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
  {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
  {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  SET_IDLE_TIMEOUT TIMEOUT=1800
  G91
  {% if printer["gcode_macro M600"].m600_enabled == 1 %}
  RESPOND MSG="Heating..."
  M109 S{printer["gcode_macro M600"].hotend_temp}
  RESPOND MSG="Loading filament..."
  G0 E70 F800
  G0 E20 F300
  M400
  M106 S255
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=0
  {% else %}
  G1 E{e} F2100
  {% endif %}
  RESPOND MSG="Resuming..."
  RESUME_BASE {get_params}
############################################################################################################################################################
[gcode_macro LOAD_FILAMENT]
description: Filament loading
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SAVE_GCODE_STATE NAME=load_state
  {% if printer.extruder.temperature < 200 %}
  RESPOND MSG="Heating..."
  M109 S200
  {% endif %}
  RESPOND MSG="Loading filament..."
  G91
  G0 E70 F300
  G0 E20 F200
  M400
  RESTORE_GCODE_STATE NAME=load_state
  {% endif %}
############################################################################################################################################################
#MISC SENSORS / AUXILARY HARDWARE/ optional features remove # to enable 
############################################################################################################################################################
[endstop_phase stepper_a]
endstop_align_zero: false
[endstop_phase stepper_b]
endstop_align_zero: false
[endstop_phase stepper_c]
endstop_align_zero: false 

[gcode_macro M600]
description: Filament change
variable_hotend_temp: 0
variable_m600_enabled: 0
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(-122) %}
  {% set z = params.Z|default(10)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=M600_state
  SET_IDLE_TIMEOUT TIMEOUT=86400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=1
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hotend_temp VALUE={printer.extruder.target}
  RESPOND MSG="Pausing..."
  PAUSE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  RESPOND MSG="Unloading filament..."
  G91
  G0 E-5 F300
  G0 E-70 F800
  M400
  RESPOND MSG="Heating stopped!"
  M109 S0
  M106 S0
  RESTORE_GCODE_STATE NAME=M600_state

#[filament_switch_sensor my_sensor]
#switch_pin: P1.29
#pause_on_runout: False
#runout_gcode:
 # PAUSE
 # M400 #Wait for current moves to finish: 
 # M117 Ejecting remaining filament
 # G0 E-0.4 F1500  # Quick Retract 
 # G0 E-510 F1200  #eject remaining filament 
#insert_gcode:
 # M117 Check temps if cold set temps to print settings 1st. 

[gcode_arcs]
resolution: 1.0

#[skew_correction] #https://www.klipper3d.org/skew_correction.html # Only use this if you have to its better to square the machine vs compensate. 

[virtual_sdcard]
path: /home/pi/gcode_files

[pause_resume] #not a copy fluidd needs this 

[display_status]

[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

